print-active-context: success

schema:
  name: root
  fields:
  - name: import
    type: string[]
    description: 'A list of references to other models composing the current model.


      Component model definitions must be visible from the current model''s

      scope.

      '
  - name: enum
    type: enum
    description: 'A definition that represents an enumerated type of value.


      An example of when to use an ''enum'' is when you want to provide several

      different options for a single value.

      '
  - name: schema
    type: schema
    description: 'A definition that defines the schema/structure of definitions.


      A ''schema'' definition can alternatively be thought as a defining the

      data structure of a definition.

      '
  - name: map
    type: Map
    description: 'A definition that represents a key-value pair. Used to define Maps

      and the types for the keys and values.


      An example use of Map would be to declare a key-value data structure

      with keys of type A and values of type B.

      '
  - name: model
    type: model
    description: 'A definition that represents a system and/or component model.


      An example of when to use a ''model'' is when you want to define the

      behavior for some component of the system.

      '
  - name: usecase
    type: usecase
    description: 'A definition that represents a usecase for the system.


      An example of when to use a ''usecase'' is when you want to define how the

      system might be used in a particular instance.

      '
  - name: ext
    type: extension
    description: 'A meta definition used for adding information to another definition.


      An example of when to use an ''ext'' is when you wish to add extra

      information to a model that isn''t included in the core specification or

      the specification of any plugins you may have installed.


      You can extend any ''enum'' and ''schema'' definition.

      '
  - name: validation
    type: Validation
    description: 'A reference to a validation plugin. Validation plugins provide verification
      and validation

      for the definition to which they are attached and any uses of that definition,
      depending

      on the validation plugins referenced by it.


      Validators are referenced by name.

      '
  - name: part
    type: Part
  - name: assembly
    type: Assembly
  - name: deployment
    type: Deployment
  - name: spec
    type: Specification
---
schema:
  name: enum
  fields:
  - name: name
    type: string
    description: 'The name of the enumeration.

      '
  - name: values
    type: string[]
    description: 'A list of strings that encompass the enumeration''s possible values.

      '
  - name: protobuf_message_options
    type: KeyValuePair[]
  required:
  - name
  - values
---
schema:
  name: extension
  fields:
  - name: name
    type: string
    description: 'The name of the extension.

      '
  - name: type
    type: string
    description: 'The name of the ''schema'' or ''enum'' definition that this definition
      is

      extending.

      '
  - name: enumExt
    type: EnumExtension
    description: 'If extending an ''enum'' definition, this represents a list of the
      items

      to add to the ''enum''s ''values'' property.


      Note: Only one of ''enumExt'' and ''schemaExt'' are valid per extension.


      See also, ''EnumExtension''

      '
  - name: schemaExt
    type: SchemaExtension
    description: 'If extending an ''schema'' definition, this represents a list of
      the items

      to add to the ''schema''s ''fields'' property.


      Note: Only one of ''enumExt'' and ''schemaExt'' are valid per extension.


      See also, ''SchemaExtension''

      '
  validation:
  - name: Mutually exclusive fields
    arguments:
    - schemaExt
    - enumExt
  required:
  - name
  - type
---
schema:
  name: EnumExtension
  fields:
  - name: add
    type: string[]
    description: 'The list of values to add to an ''enum'' extension.

      '
  required:
  - add
---
schema:
  name: SchemaExtension
  fields:
  - name: add
    type: Field[]
    description: 'The list of fields to add to a ''schema'' extension.

      '
  - name: required
    type: string[]
    description: 'The list of names of all the additional fields that are required
      for the

      extended definition.

      '
  required:
  - add
---
schema:
  name: Validation
  fields:
  - name: name
    type: string
    description: 'The name of the validation rule and plugin.

      '
  - name: description
    type: string
    description: 'A high-level description of the validation plugin.

      '
  - name: behavior
    type: Behavior[]
    description: 'A list of behaviors that the validation plugin will perform.

      '
  required:
  - name
  - description
  - behavior
  validation:
  - name: Validation definition has an implementation
---
schema:
  name: ValidationReference
  fields:
  - name: name
    type: string
    description: 'The name of the validation definition.

      '
  - name: arguments
    type: string[]
    description: 'A list of arguments to pass to the validator.

      '
  required:
  - name
---
schema:
  name: ValidatorInput
  fields:
  - name: name
    type: string
    description: 'The name of the input to the validation rule and plugin.

      '
---
schema:
  name: ValidatorOutput
  fields:
  - name: name
    type: string
    description: 'The name of the output from the validation rule and plugin.

      '
---
schema:
  name: Scenario
  fields:behavrio
  - name: scenario
    type: string
    description: 'The name of the scenario.

      '
  - name: tags
    type: string[]
    description: 'Tags associated with the scenario. These could be used to group
      similar

      scenarios into categories like "front-end", "back-end", etc.

      '
  - name: given
    type: string[]
    description: 'A list of preconditions that must be true in order for the scenario
      to

      perform the expected action or provide the expected result.

      '
  - name: when
    type: string[]
    description: 'A list of triggers that indicate some reason for the system to act
      in a

      certain way or provide some result.

      '
  - name: then
    type: string[]
    description: 'A list of post conditions that will be true once the system has
      completed

      its action based on the triggers.

      '
  required:
  - scenario
  - when
  - then
---
enum:
  name: BehaviorType
  values:
  - pub-sub
  - request-response
  - startup
  - timer
  - logging
  - command
---
enum:
  name: Primitives
  values:
  - string
  - int
  - number
  - bool
  - date
  - file
  - double
  - float
  - int32
  - int64
  - uint32
  - uint64
  - sint32
  - sint64
  - fixed32
  - fixed64
  - bytes
---
schema:
  name: Field
  fields:
  - name: name
    type: string
    description: 'The name of the field.


      Used to refer to the field, in certain cases.

      '
  - name: type
    type: string
    description: 'The type of the field.


      Used to constrain the field''s values to make it simpler to reason about. Must

      reference an existing definition by name.

      '
  - name: description
    type: string
    description: 'A description for the field to let users know what it''s for and
      any

      other useful information.

      '
  - name: python_type
    type: PythonDataType
  required:
  - name
  - type
  validation:
  - name: Type references exist
---
schema:
  name: schema
  fields:
  - name: name
    type: string
    description: 'The name of the schema definition.

      '
  - name: fields
    type: Field[]
    description: 'A list of fields that make up the definition.

      '
  - name: required
    type: string[]
    description: 'The list of names of all the fields that are required for the

      definition.

      '
  - name: validation
    type: ValidationReference[]
    description: 'References and additional arguments for validations to apply to
      the definition.

      '
  - name: requirements
    type: RequirementReference
  - name: protobuf_message_options
    type: KeyValuePair[]
  required:
  - name
  - fields
  validation:
  - name: Root key is defined
  - name: Required fields are present
---
schema:
  name: Behavior
  fields:
  - name: name
    type: string
    description: 'The name of the behavior.

      '
  - name: type
    type: BehaviorType
    description: 'The type of behavior.

      '
  - name: description
    type: string
    description: 'An explanatory description of the behavior, including what the behavior

      is, why it exists, etc.

      '
  - name: tags
    type: string[]
    description: 'Tags associated with the behavior. These could be used to group
      similar

      behaviors into categories like "timing", "network", etc.

      '
  - name: input
    type: Field[]
    description: 'The list of all the fields that are inputs to the component when
      the

      behavior is performed.

      '
  - name: output
    type: Field[]
    description: 'The list of all the fields that are outputs to the component when
      the

      behavior is performed.

      '
  - name: acceptance
    type: Scenario[]
    description: 'A list of scenarios that define the acceptance criteria to signify
      that

      the system is behaving as expected.

      '
  - name: requirements
    type: RequirementReference
  required:
  - name
  - type
---
schema:
  name: model
  fields:
  - name: name
    type: string
    description: 'The name of the model.

      '
  - name: description
    type: string
    description: 'An explanatory description for the model including what the

      component/system is modeling and any other relevant information.

      '
  - name: components
    type: Field[]
    description: 'A list of models that are components of the system.

      '
  - name: behavior
    type: Behavior[]
    description: 'A list of behaviors that the system being modeled will perform.

      '
  - name: state
    type: Field[]
    description: 'A list of data items representing internal state of the modeled

      entity. State is visible within the model but is not

      visible to other models. State may be visible between multiple

      instances of the modeled entity to support horizontal scaling.

      '
  required:
  - name
  validation:
  - name: Subcomponents are models
---
schema:
  name: usecase
  fields:
  - name: name
    type: string
    description: 'The name of the use case.

      '
  - name: description
    type: string
    description: 'An explanatory description of the use case to include what purpose
      the

      use case serves, design ideas when fulfilling the use case, etc.

      '
  - name: participants
    type: Field[]
    description: 'A list of participants in the use case.


      Generally, these would be users, other systems, etc. that are

      interacting with the system during the course of the use case.

      '
  - name: steps
    type: Step[]
    description: 'A list of steps taken in the use case.


      See ''Step''

      '
  required:
  - name
  - participants
  - steps
---
schema:
  name: Step
  fields:
  - name: step
    type: string
    description: 'The name of the step.

      '
  - name: source
    type: string
    description: 'The source for the step. This should be the name of a participant
      - i.e.

      a modeled system component.

      '
  - name: target
    type: string
    description: 'The target for the step. This should be the name of a participant
      - i.e.

      a modeled system component.

      '
  - name: action
    type: string
    description: 'A behavior reference on the target or a subordinate use case definition.

      '
  - name: if
    type: Branch
    description: 'Used to create an "alt" in a sequence diagram.

      '
  - name: else
    type: Branch
    description: 'Used to create the "lower cell" in an "alt" in a sequence diagram.

      '
  - name: loop
    type: Branch
    description: 'Used to create a loop in a sequence diagram.

      '
---
schema:
  name: Branch
  fields:
  - name: condition
    type: string
    description: 'A condition to test whether a sequence of steps should be performed.

      '
  - name: steps
    type: Step[]
    description: 'A list of steps to perform if the condition for the branch is "true".

      '
  required:
  - condition
  - steps
---
schema:
  name: Map
  description: Defines a map/key-value pair data structure, and the typing.
  fields:
  - name: name
    type: string
    description: The name of the Map type
  - name: key_type
    type: string
    description: The key type for elements in the map.
  - name: value_type
    type: string
    description: The value type for elements in the map.
  validation:
  - name: Required fields are present
  required:
  - name
  - key_type
  - value_type
---
schema:
  name: KeyValuePair
  description: Defines a key-value pair, use in list to create key-value pairs in
    AaC.
  fields:
  - name: key
    type: string
    description: The key map entry.
  - name: value
    type: string
    description: The value map entry.
  validation:
  - name: Required fields are present
  required:
  - key
  - value
---
validation:
  name: Root key is defined
  description: Verify that the definition's root key is defined
  behavior:
  - name: Verify that the definition's root key is defined
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully validate definition root key
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput contains some AaC definition that has a root key defined
        by the 'root' definition in the core specification.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the definition under test is valid
    - scenario: Successfully validate an extended root key
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput content of an extension definition that adds a new root
        key.
      - The ValidatorInput contains some AaC definition that has a root key that has
        been added to the 'root' definition in the core specification.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the definition under test is valid
    - scenario: Fail to validate definitions that reference keys that are not defined
        by the 'root' definition
      given:
      - The ValidatorInput content consists of otherwise valid AaC definitions.
      - The ValidatorInput contains at least one AaC definition that has a root key
        not defined by the 'root' definition in the core specification.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that the root key is not defined in the
        root keys definition.
---
validation:
  name: Subcomponents are models
  description: Verifies that the type field of every subcomponent refers to a model.
  behavior:
  - name: Verify that subcomponents are of the model type.
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully Validate a model definition's subcomponent types
      given:
      - The ValidatorInput content consists of a model definition.
      - The ValidatorInput contains at least one subcomponent.
      - All subcomponents are model types.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the definition under test is valid
    - scenario: Fail to validate a model's subcomponent types
      given:
      - The ValidatorInput content consists of a model definition.
      - The ValidatorInput contains at least one subcomponent.
      - The type of at least one of the subcomponents is not model.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that the subcomponent(s) are not models.
---
validation:
  name: Mutually exclusive fields
  description: 'Verify that only one of the fields are defined at any time.


    Exclusive fields are defined by declaring the exclusive field names as validation
    arguments.

    '
  behavior:
  - name: Verify mutually exclusive fields
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully validate one exclusive field
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput contains some AaC definitions with only one of the mutually
        exclusive fields defined.
      when:
      - The input is validation
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the validator plugin under test is valid
    - scenario: Successfully validate zero exclusive fields
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput contains some AaC definitions with none of the mutually
        exclusive fields defined.
      when:
      - The input is validation
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the validator plugin under test is valid
    - scenario: Fail to validate multiple exclusive fields
      given:
      - The ValidatorInput content consists of otherwise valid AaC definitions.
      - The ValidatorInput contains some AaC definitions with more than one of the
        mutually exclusive fields defined.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that mutually exclusive fields are simultaneously
        defined.
---
validation:
  name: Validation definition has an implementation
  description: Verifies that every validation definition has a corresponding python
    plugin implementation
  behavior:
  - name: Verify validation definition and implementation
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully Validate a Validator Plugin
      given:
      - The validation plugin has a valid `validation` definition.
      - The validation definition has a corresponding python implementation.
      when:
      - The validator plugin is tested
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the validator plugin under test is valid
    - scenario: Fail to Validate a Validator Plugin with Missing Python Implementation
      given:
      - The validation plugin has a valid `validation` definition.
      - The validation does not have definition has a corresponding python implementation.
      when:
      - The validator plugin is tested
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that there is no corresponding python
        implementation
---
validation:
  name: Required fields are present
  description: Verifies every field declared in the `required` section are present
    and populated
  behavior:
  - name: Verify that definition fields marked as required are populated.
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully Validate a definition's required fields
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput contains some AaC definitions that reference other definitions.
      when:
      - The input is validation
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the validator plugin under test is valid
    - scenario: Fail to validate a definition's required fields
      given:
      - The ValidatorInput content consists of otherwise valid AaC definitions.
      - The ValidatorInput contains at least one AaC definitions that references a
        definition that does not exist.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that there are missing required fields
---
validation:
  name: Type references exist
  description: Verify that references to definitions and models are defined
  behavior:
  - name: Verify that referenced definitions are defined
    type: request-response
    description: null
    input:
    - name: input
      type: ValidatorInput
    output:
    - name: results
      type: ValidatorOutput
    acceptance:
    - scenario: Successfully validate definition references
      given:
      - The ValidatorInput content consists of valid AaC definitions.
      - The ValidatorInput contains some AaC definitions that reference other definitions.
      when:
      - The input is validation
      then:
      - The ValidatorOutput does not indicate any errors
      - The ValidatorOutput does not indicate any warnings
      - The ValidatorOutput indicates the validator plugin under test is valid
    - scenario: Fail to validate definition references
      given:
      - The ValidatorInput content consists of otherwise valid AaC definitions.
      - The ValidatorInput contains at least one AaC definitions that references a
        definition that does not exist.
      when:
      - The ValidatorInput is validated
      then:
      - The ValidatorOutput has errors
      - The ValidatorOutput errors indicate that there is no corresponding definition
        with the same name
---
model:
  name: material-model
  description: material-model is an Architecture-as-Code plugin that allows a user
    to model the physical design of a system.
---
schema:
  name: Part
  description: A material item used in a system (hardware, software, or service).
  fields:
  - name: name
    type: string
    description: Unique name of the part
  - name: make
    type: string
    description: The source supplier
  - name: model
    type: string
    description: The source supplier's model number
  - name: description
    type: string
    description: A short description of the part
  - name: unit_cost
    type: number
    description: The cost of this item
  - name: lead_time
    type: int
    description: The quoted or estimated lead time to receive the part once put on
      order (in days)
  - name: quote_type
    type: QuoteType
    description: How the unit cost (and probably lead time) was obtained
  - name: quote_source
    type: string
    description: Pointer to material supporting the unit cost. Quote type will have
      a bearing on field content.
  required:
  - name
  - make
  - model
  - description
  - unit_cost
---
enum:
  name: QuoteType
  values:
  - Engineering_Estimate
  - Vendor_Quote
  - Web_Reference
  - Furnished_Equipment
  - Reuse
---
schema:
  name: PartRef
  description: Reference to a part with quantity
  fields:
  - name: name
    type: string
    description: Reference fo the name in a Part item.
  - name: quantity
    type: int
    description: The count of the parts to be used.
  required:
  - name
  - quantity
---
schema:
  name: Assembly
  description: A collection of parts into a logical thing.
  fields:
  - name: name
    type: string
    description: The unique name of the assembly.
  - name: description
    type: string
    description: A description of the assembly.
  - name: parts
    type: PartRef[]
    description: A list of parts that contribute to the assembly.
  - name: sub-assemblies
    type: AssemblyRef[]
    description: A list of assemblies that contribute to the assembly.
  required:
  - name
  - description
---
schema:
  name: AssemblyRef
  description: Reference to an assembly with quantity
  fields:
  - name: name
    type: string
    description: Reference fo the name in another Assembly item.
  - name: quantity
    type: int
    description: The count of the assemblies to be used.
  required:
  - name
  - quantity
---
schema:
  name: Deployment
  description: A collection of parts and assemblies to be deployed to one or more
    locations.
  fields:
  - name: name
    type: string
    description: The unique name of the assembly.
  - name: description
    type: string
    description: A description of the assembly.
  - name: location
    type: string
    description: The location for the deployment.
  - name: parts
    type: PartRef[]
    description: A list of parts that contribute to the deployment.
  - name: assemblies
    type: AssemblyRef[]
    description: A list of assemblies that contribute to the deployment.
  - name: sub-deployments
    type: DeploymentRef[]
    description: A list of deployments that contribute to the deployment.
  - name: need_date
    type: date
    descriptioN: Optional field to define a needed material receive date.
  required:
  - name
  - description
  - location
---
schema:
  name: DeploymentRef
  description: Reference to a deployment with quantity
  fields:
  - name: name
    type: string
    description: Reference fo the name in another Deployment item.
  - name: quantity
    type: int
    description: The number of deployments to include.
  required:
  - name
  - quantity
---
model:
  name: aac-spec
  description: aac-spec is a Architecture-as-Code plugin that enables requirement
    definition and traceability in Architecture-as-Code models.
  behavior:
  - name: spec-validate
    type: command
    description: Validates spec traces within the AaC model
    input:
    - name: architecture_file
      type: file
      description: The file to validate for spec cross-references.
    acceptance:
    - scenario: Valid spec traces are modeled.
      given:
      - The {{spec-validate.input.architecture_file}} contains a valid architecture
        specification.
      when:
      - The aac app is run with the spec-validate command.
      then:
      - A message saying spec validation was successful is printed to the console.
---
schema:
  name: Specification
  fields:
  - name: name
    type: string
  - name: description
    type: string
  - name: sections
    type: SpecSection[]
  - name: requirements
    type: Requirement[]
  required:
  - name
---
schema:
  name: SpecSection
  fields:
  - name: name
    type: string
  - name: description
    type: string
  - name: requirements
    type: Requirement[]
  required:
  - name
---
schema:
  name: Requirement
  fields:
  - name: id
    type: string
  - name: shall
    type: string
  - name: parent
    type: RequirementReference
  - name: attributes
    type: RequirementAttribute[]
  required:
  - id
  - shall
---
schema:
  name: RequirementAttribute
  fields:
  - name: name
    type: string
  - name: value
    type: string
  required:
  - name
  - value
---
schema:
  name: RequirementReference
  fields:
  - name: ids
    type: string[]
  required:
  - ids
---
model:
  name: aac-plantuml
  description: aac-plantuml is a Architecture-as-Code plugin that enables Plant UML
    content to be generated from Arch-as-Code models.
  behavior:
  - name: puml-component
    type: command
    description: Converts an AaC model to Plant ULM component diagram
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: Path to a yaml file containing an AaC usecase from which to generate
        a Plant UML component diagram.
    - name: --output_directory
      type: string
      python_type: str
      description: Output directory for the PlantUML (.puml) diagram file
    acceptance:
    - scenario: Output PlantUML component diagram for valid architecture.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      when:
      - The aac app is run with the puml-component command.
      then:
      - A PlantUML component diagram of the model is printed to the console.
    - scenario: Output PlantUML component diagram to file.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      - The positional argument {{puml.input.--output_directory}} contains a valid
        filepath.
      when:
      - The aac app is run with the puml-component command.
      then:
      - A PlantUML component diagram of the model is generated to a .puml file.
  - name: puml-sequence
    type: command
    description: Converts an AaC usecase to Plant ULM sequence diagram
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: Path to a yaml file containing an AaC usecase from which to generate
        a Plant UML sequence diagram.
    - name: --output_directory
      type: string
      python_type: str
      description: Output directory for the PlantUML (.puml) diagram file
    acceptance:
    - scenario: Output PlantUML sequence diagram for valid use case.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      when:
      - The aac app is run with the puml-sequence command.
      then:
      - A PlantUML sequence diagram of the use case is printed to the console.
    - scenario: Output PlantUML sequence diagram to file.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      - The positional argument {{puml.input.--output_directory}} contains a valid
        filepath.
      when:
      - The aac app is run with the puml-sequence command.
      then:
      - A PlantUML sequence diagram of the model is generated to a .puml file.
  - name: puml-object
    type: command
    description: Converts an AaC model to Plant ULM object diagram
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: Path to a yaml file containing an AaC usecase from which to generate
        a Plant UML object diagram.
    - name: --output_directory
      type: string
      python_type: str
      description: Output directory for the PlantUML (.puml) diagram file
    acceptance:
    - scenario: Output PlantUML object diagram for valid model.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      when:
      - The aac app is run with the puml-object command.
      then:
      - A PlantUML object diagram of the model is printed to the console.
    - scenario: Output PlantUML object diagram to file.
      given:
      - The {{puml.input.architecture_file}} contains a valid model.
      - The positional argument {{puml.input.--output_directory}} contains a valid
        filepath.
      when:
      - The aac app is run with the puml-object command.
      then:
      - A PlantUML object diagram of the model is generated to a .puml file.
---
model:
  name: aac-gen-gherkin-behaviors
  description: aac-gen-gherkin-behaviors is an Architecture-as-Code plugin that generates
    Gherkin feature files from model behavior scenarios.
  behavior:
  - name: gen-gherkin-behaviors
    type: command
    description: Generate Gherkin feature files from Arch-as-Code model behavior scenarios.
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: The yaml file containing the data models to generate as Gherkin
        feature files.
    - name: output_directory
      type: string
      python_type: str
      description: The directory to write the generated Gherkin feature files to.
    acceptance:
    - scenario: Output Gherkin feature files for behavior scenarios in an Architecture
        model.
      given:
      - The {{gen-gherkin-behaviors.input.architecture_file}} contains a valid architecture.
      when:
      - The aac app is run with the gen-gherkin-behaviors command and a valid architecture
        file.
      then:
      - Gherkin feature files are written to {{gen-gherkin-behaviors.input.output_directory}}.
---
model:
  name: aac-gen-design-doc
  description: aac-gen-design-doc is an Architecture-as-Code plugin that generates
    a System Design Document from Architecture-as-Code models.
  behavior:
  - name: gen-design-doc
    type: command
    description: Generate a System Design Document from Architecture-as-Code models.
    input:
    - name: architecture_files
      type: string
      python_type: str
      description: A comma-separated list of yaml file(s) containing the modeled system
        for which to generate the System Design document.
    - name: output_directory
      type: string
      python_type: str
      description: The directory to which the System Design document will be written.
    - name: --template_file
      type: string
      python_type: str
      description: The name of the Jinja2 template file to use for generating the
        document. (optional)
    acceptance:
    - scenario: Output a System Design document containing an outline of the model
        and its components.
      given:
      - The {{gen-design-doc.input.architecture_files}} represent a valid system architecture.
      - The {{gen-design-doc.input.template_file}} exists and is a valid Jinja2 template.
      when:
      - The aac application is run with the gen-design-doc command and one, or more,
        valid architecture files, a template file, and an output directory.
      then:
      - A System Design document is written to {{gen-design-doc.input.output_directory}}.
      - The {{gen-design-doc.input.template_file}} template is used as a basis for
        the System Design document.
      - The System Design document is generated and contains an outline of the model(s).
---
model:
  name: aac-gen-protobuf
  description: aac-gen-protobuf is an Architecture-as-Code plugin that generates protobuf
    message definitions from Architecture-as-Code models.
  behavior:
  - name: gen-protobuf
    type: command
    description: Generate protobuf messages from Arch-as-Code models
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: The yaml file containing the data models to generate as Protobuf
        messages.
    - name: output_directory
      type: string
      python_type: str
      description: The directory to write the generated Protobuf messages to.
    acceptance:
    - scenario: Output protobuf messages for behavior input/output entries in an Architecture
        model.
      given:
      - The {{gen-protobuf.input.architecture_file}} contains a valid architecture.
      when:
      - The aac app is run with the gen-protobuf command and a valid architecture
        file.
      then:
      - Protobuf messages are written to {{gen-protobuf.input.output_directory}}.
---
model:
  name: gen-plugin
  description: An Architecture-as-Code plugin that generates opinionated plugin stubs
    for easier and quicker plugin development.
  behavior:
  - name: gen-plugin
    type: command
    description: Generate
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: filepath to the architecture file.
    acceptance:
    - scenario: Generate first party plugin stub files.
      given:
      - The {{gen-plugin.input.architecture_file}} contains a valid model.
      - The {{gen-plugin.input.architecture_file}} is in the AaC repository under
        the directory path "src/aac/plugins/".
      when:
      - The aac app is run with the gen-plugin command.
      then:
      - Stubbed first party plugin files are generated.
    - scenario: Generate third party plugin stub files.
      given:
      - The {{gen-plugin.input.architecture_file}} contains a valid model.
      when:
      - The aac app is run with the gen-plugin command.
      - The value of {{gen-plugin.input.architecture_file}} does not contain "src/aac/plugins/".
      then:
      - Stubbed third party plugin files are not generated.
---
enum:
  name: PythonDataType
  values:
  - str
  - int
  - float
  - complex
  - list
  - tuple
  - range
  - dict
  - set
  - frozenset
  - bool
  - bytes
  - bytearray
  - memoryview
---
model:
  name: gen-json
  description: An Architecture-as-Code plugin that generates json representations
    of the AaC yaml DSL.
  behavior:
  - name: gen-json
    type: command
    description: Generate JSON representation of AaC yaml DSL
    input:
    - name: architecture_file
      type: string
      python_type: str
      description: filepath to the architecture file to convert to JSON.
    - name: --output_directory
      type: string
      python_type: str
      description: Directory in which JSON files will be written
    acceptance:
    - scenario: Output JSON representation.
      given:
      - The {{gen-json.input.architecture_file}} contains a valid model.
      when:
      - The aac app is run with the gen-json command.
      then:
      - JSON representation is output to the user or to the user defined output directory.
---
ext:
  name: MaterialRootItems
  type: root
  schemaExt:
    add:
    - name: part
      type: Part
    - name: assembly
      type: Assembly
    - name: deployment
      type: Deployment
---
ext:
  name: addLoggingToBehaviorType
  type: BehaviorType
  enumExt:
    add:
    - logging
---
ext:
  name: addSpecificationToRoot
  type: root
  schemaExt:
    add:
    - name: spec
      type: Specification
---
ext:
  name: addSpecTraceToBehavior
  type: Behavior
  schemaExt:
    add:
    - name: requirements
      type: RequirementReference
---
ext:
  name: addSpecTraceToData
  type: schema
  schemaExt:
    add:
    - name: requirements
      type: RequirementReference
---
ext:
  name: ProtobufPrimitiveTypesExtension
  type: Primitives
  enumExt:
    add:
    - double
    - float
    - int32
    - int64
    - uint32
    - uint64
    - sint32
    - sint64
    - fixed32
    - fixed64
    - bool
    - string
    - bytes
---
ext:
  name: SchemaMessageOptions
  type: schema
  schemaExt:
    add:
    - name: protobuf_message_options
      type: KeyValuePair[]
---
ext:
  name: EnumMessageOptions
  type: enum
  schemaExt:
    add:
    - name: protobuf_message_options
      type: KeyValuePair[]
---
ext:
  name: PythonTypeField
  type: Field
  schemaExt:
    add:
    - name: python_type
      type: PythonDataType
---
ext:
  name: CommandBehaviorType
  type: BehaviorType
  enumExt:
    add:
    - command

